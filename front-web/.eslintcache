[{"C:\\Users\\Gois\\Desktop\\Projetos\\espacolr\\front-web\\src\\pages\\Admin\\User\\Form\\index.tsx":"1","C:\\Users\\Gois\\Desktop\\Projetos\\espacolr\\front-web\\src\\core\\components\\BaseForm\\index.tsx":"2","C:\\Users\\Gois\\Desktop\\Projetos\\espacolr\\front-web\\src\\core\\types\\User.ts":"3"},{"size":8291,"mtime":1616343769380,"results":"4","hashOfConfig":"5"},{"size":1072,"mtime":1616258809029,"results":"6","hashOfConfig":"5"},{"size":279,"mtime":1616341216042,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1bigoil",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Gois\\Desktop\\Projetos\\espacolr\\front-web\\src\\pages\\Admin\\User\\Form\\index.tsx",["15","16"],"import BaseForm from 'core/components/BaseForm';\r\nimport { makePrivateRequest } from 'core/utils/request';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport './styles.scss';\r\nimport { Role } from 'core/types/User';\r\n\r\ntype FormState = {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    roles: Role[];\r\n}\r\n\r\ntype ParamsType = {\r\n    userId: string;\r\n}\r\n\r\nconst options = [\r\n    { id: '1', authority: 'ROLE_OPERATOR' },\r\n    { id: '2', authority: 'ROLE_ADMIN' }\r\n]\r\n\r\nconst Form = () => {\r\n    const { register, handleSubmit, errors, setValue, control } = useForm<FormState>();\r\n    const history = useHistory();\r\n    const { userId } = useParams<ParamsType>();\r\n    const [role, setRole] = useState<Role[]>([]);\r\n    const isEditing = userId !== 'create'\r\n\r\n    useEffect(() => {\r\n        if (isEditing) {\r\n            makePrivateRequest({ url: `/users/${userId}` })\r\n                .then(response => {\r\n                    setValue('firstName', response.data.firstName);\r\n                    setValue('email', response.data.email);\r\n                    setValue('lastName', response.data.lastName);\r\n                    setValue('roles', response.data.roles);\r\n                })\r\n        }\r\n    }, [userId, isEditing, setValue]);\r\n\r\n    const onSubmit = (data: FormState) => {\r\n        makePrivateRequest({\r\n            url: isEditing ? `/users/${userId}` : '/users',\r\n            method: isEditing ? 'PUT' : 'POST',\r\n            data\r\n        })\r\n            .then(() => {\r\n                toast.success('Usuário cadastrado com sucesso!', {\r\n                    style: { background: '#81c41d' },\r\n                    position: \"bottom-right\"\r\n                });\r\n                history.push('/admin/user');\r\n            })\r\n            .catch(() => {\r\n                toast.error('Error ao salvar usuário!')\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container-form\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <BaseForm\r\n                    title={isEditing ? 'EDITAR USUÁRIO' : \"CADASTRAR USUÁRIO\"}\r\n                >\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <div className=\"mb-4\">\r\n                                <input\r\n                                    name=\"firstName\"\r\n                                    type=\"text\"\r\n                                    className={`form-control input-base ${errors.firstName ? 'is-invalid' : ''}`}\r\n                                    placeholder=\"Nome\"\r\n                                    ref={register({\r\n                                        required: \"Campo obrigatório\",\r\n                                        minLength: { value: 3, message: 'O campo deve ter no mínimo 3 caracteres' },\r\n                                        maxLength: { value: 25, message: 'O campo deve ter no maximo 25 caracteres' }\r\n                                    })}\r\n                                />\r\n                                {errors.firstName && (\r\n                                    <div className=\"invalid-feedback d-block\">\r\n                                        {errors.firstName.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mb-4\">\r\n                                <input\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    className={`form-control input-base ${errors.email ? 'is-invalid' : ''}`}\r\n                                    placeholder=\"Email\"\r\n                                    ref={register({\r\n                                        required: \"Campo obrigatório\",\r\n                                        pattern: {\r\n                                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                            message: \"Email inválido\"\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                {errors.email && (\r\n                                    <div className=\"invalid-feedback d-block\">\r\n                                        {errors.email.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mb-4\">\r\n                                <input\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    className={`form-control input-base ${errors.password ? 'is-invalid' : ''}`}\r\n                                    placeholder=\"Digite aqui a Senha\"\r\n                                    ref={register({\r\n                                        required: \"Campo obrigatório\",\r\n                                        minLength: { value: 6, message: 'O campo deve ter no mínimo 6 caracteres' },\r\n                                    })}\r\n                                />\r\n                                {errors.password && (\r\n                                    <div className=\"invalid-feedback d-block\">\r\n                                        {errors.password.message}\r\n                                    </div>\r\n                                )}\r\n                                <p className=\"form-text-info mt-2\"> A sua senha deve ter pelo menos 8 caracteres e conter pelo menos um número</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <div className=\"mb-4\">\r\n                                <input\r\n                                    name=\"lastName\"\r\n                                    type=\"text\"\r\n                                    className={`form-control input-base ${errors.lastName ? 'is-invalid' : ''}`}\r\n                                    placeholder=\"Sobrenome\"\r\n                                    ref={register({\r\n                                        required: \"Campo obrigatório\",\r\n                                        minLength: { value: 3, message: 'O campo deve ter no mínimo 3 caracteres' },\r\n                                        maxLength: { value: 25, message: 'O campo deve ter no maximo 25 caracteres' }\r\n                                    })}\r\n                                />\r\n\r\n                                {errors.lastName && (\r\n                                    <div className=\"invalid-feedback d-block\">\r\n                                        {errors.lastName.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mb-4\">\r\n                                <Controller\r\n                                    name=\"roles\"\r\n                                    rules={{ required: true }}\r\n                                    control={control}\r\n                                    as={Select}\r\n                                    classNamePrefix=\"roles-select\"\r\n                                    options={options}\r\n                                    getOptionLabel={(option: Role) => option.authority}\r\n                                    getOptionValue={(option: Role) => option.id}\r\n                                    isMulti\r\n                                    placeholder=\"Tipo Usuário\"\r\n                                />\r\n                                {errors.roles && (\r\n                                    <div className=\"invalid-feedback d-block\">\r\n                                        Campo obrigatório\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </BaseForm>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","C:\\Users\\Gois\\Desktop\\Projetos\\espacolr\\front-web\\src\\core\\components\\BaseForm\\index.tsx",[],"C:\\Users\\Gois\\Desktop\\Projetos\\espacolr\\front-web\\src\\core\\types\\User.ts",[],{"ruleId":"17","severity":1,"message":"18","line":32,"column":12,"nodeType":"19","messageId":"20","endLine":32,"endColumn":16},{"ruleId":"17","severity":1,"message":"21","line":32,"column":18,"nodeType":"19","messageId":"20","endLine":32,"endColumn":25},"@typescript-eslint/no-unused-vars","'role' is assigned a value but never used.","Identifier","unusedVar","'setRole' is assigned a value but never used."]